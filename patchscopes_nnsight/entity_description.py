from patchscopes_nnsight.patchscopes import SourceContext, TargetContext, Patchscope


# A source prompt with a salient entity
source_prompt = (
    "The Great Wall of China"
)

remote = True

# Setup source context with long passage containing a salient entity
source_context = SourceContext(
    prompt=source_prompt,  # Source prompt containing an entity
    model_name="gpt2-xl" if remote else "gpt2",
    position=-1,
    layer=0,
    device="cpu"
)

# Constructing a few-shot target prompt based on the source entity
target_context = TargetContext.from_source(source_context)
target_context.max_new_tokens = 30
target_context.prompt = (
    "Egyptian Pyramids: monumental structures of ancient Egypt, most of which are situated on the Giza Plateau; "
    "dog: a domesticated carnivorous mammal that typically has a long snout, an acute sense of smell; "
    "breakfast: a meal eaten in the morning, the first of the day; "
    "ennui: a feeling of listlessness and dissatisfaction arising from a lack of occupation or excitement; "
    "Kanye West: an American rapper, singer, songwriter, record producer, entrepreneur, and fashion designer; "
    "Wikipedia: a free online encyclopedia, created and edited by volunteers around the world and hosted by the Wikimedia Foundation; "
    "x:"
)

# Now, setup the patchscope with the defined contexts
patchscope = Patchscope(source=source_context, target=target_context)
patchscope.REMOTE = remote

start_position = patchscope.find_in_target(" x")
patchscope.target.position = start_position

layers = len(patchscope.target_model.transformer.h)
step_size = layers // 4

for target_layer in range(3, layers, step_size):
    patchscope.target.layer = target_layer
    target_tokens = patchscope.target_model.tokenizer.encode(target_context.prompt)
    target_length = len(target_tokens)

    # We will inspect the description generated by the model for the entity at different layers
    entity_descriptions_by_layer = []
    count = 1
    for layer in range(layers - 5, layers):
        print(f"Analyzing Source {layer}, Target {target_layer}. Iteration: {count} of {(layers // step_size) + 1}")

        # Adjust the source context to the layer currently being inspected
        patchscope.source.layer = layer

        # Perform the patching operation and generate the description
        patchscope.run()

        # Retrieve and save the generated description for the entity
        generated_description = patchscope.full_output()
        full_joined = "".join(generated_description)
        print(f"Layer {layer} - Generated Description: {full_joined}")
        joined = "".join(generated_description[target_length:])
        entity_descriptions_by_layer.append(joined)

        count += 1

    joined = "\n".join(entity_descriptions_by_layer)
    print(f"Entity Descriptions by Layer: {joined}")
